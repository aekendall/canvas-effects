// Generated by CoffeeScript 1.6.3
/*
  Coord2d is a library for creating and manipulating 2D coordinates in either cartesian or polar systems.
*/


(function() {
  var PI_OVER_2, RAD_TO_DEG;

  PI_OVER_2 = 1.57079632679;

  RAD_TO_DEG = 57.2957795131;

  this.Coord2d = (function() {
    function Coord2d() {
      this.x = 0;
      this.y = 0;
    }

    Coord2d.prototype.add = function(c) {
      this.x += c.x;
      this.y += c.y;
      return this;
    };

    Coord2d.prototype.normalize = function() {
      var r;
      r = this.constructor.radiusFromXY(this.x, this.y);
      this.x /= r;
      this.y /= r;
      return this;
    };

    Coord2d.prototype.toDegrees = function() {
      return RAD_TO_DEG * this.constructor.angleFromXY(this.x, this.y);
    };

    Coord2d.prototype.fromObject = function(o) {
      this.x = o.x;
      this.y = o.y;
      return this;
    };

    Coord2d.prototype.fromCartesian = function(x, y) {
      this.x = x;
      this.y = y;
      return this;
    };

    Coord2d.prototype.fromPolar = function(r, a) {
      this.x = this.constructor.xFromPolar(r, a);
      this.y = this.constructor.yFromPolar(r, a);
      return this;
    };

    Coord2d.prototype.clone = function() {
      return this.constructor.fromCartesian(this.x, this.y);
    };

    Coord2d.radiusFromXY = function(x, y) {
      return Math.sqrt(x * x + y * y);
    };

    Coord2d.angleFromXY = function(x, y) {
      return Math.atan2(y, x);
    };

    Coord2d.angleFromDiff = function(x1, y1, x2, y2) {
      return this.angleFromXY(x2 - x1, y2 - y1);
    };

    Coord2d.angleToDegrees = function(a) {
      return RAD_TO_DEG * a;
    };

    Coord2d.xFromPolar = function(r, a) {
      return r * Math.cos(a);
    };

    Coord2d.yFromPolar = function(r, a) {
      return r * Math.sin(a);
    };

    Coord2d.fromObject = function(o) {
      var c;
      c = new this();
      c.fromObject(o);
      return c;
    };

    Coord2d.fromCartesian = function(x, y) {
      var c;
      c = new this();
      c.fromCartesian(x, y);
      return c;
    };

    Coord2d.fromXY = Coord2d.fromCartesian;

    Coord2d.fromPolar = function(r, a) {
      var c;
      c = new this();
      c.fromPolar(r, a);
      return c;
    };

    return Coord2d;

  })();

}).call(this);

/*
//@ sourceMappingURL=coord2d.map
*/
